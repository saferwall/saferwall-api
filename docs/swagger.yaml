basePath: /v1
definitions:
  entity.File:
    properties:
      byte_entropy:
        items:
          type: integer
        type: array
      comments_count:
        type: integer
      crc32:
        type: string
      exif:
        additionalProperties:
          type: string
        type: object
      fileformat:
        type: string
      first_seen:
        type: integer
      histogram:
        items:
          type: integer
        type: array
      last_scanned:
        type: integer
      magic:
        type: string
      md5:
        type: string
      ml:
        additionalProperties: true
        type: object
      multiav:
        additionalProperties: true
        type: object
      packer:
        items:
          type: string
        type: array
      pe: {}
      sha1:
        type: string
      sha256:
        type: string
      sha512:
        type: string
      size:
        type: integer
      ssdeep:
        type: string
      status:
        type: integer
      strings: {}
      submissions:
        items:
          $ref: '#/definitions/entity.Submission'
        type: array
      tags:
        additionalProperties: true
        type: object
      trid:
        items:
          type: string
        type: array
      type:
        type: string
    type: object
  entity.Submission:
    properties:
      country:
        type: string
      filename:
        type: string
      src:
        type: string
      timestamp:
        type: integer
    type: object
  entity.User:
    properties:
      admin:
        type: boolean
      bio:
        type: string
      comments_count:
        type: integer
      confirmed:
        type: boolean
      email:
        type: string
      followers:
        items:
          type: string
        type: array
      followers_count:
        type: integer
      following:
        items:
          type: string
        type: array
      following_count:
        type: integer
      has_avatar:
        type: boolean
      last_seen:
        type: integer
      likes:
        items:
          type: string
        type: array
      likes_count:
        type: integer
      location:
        type: string
      member_since:
        type: integer
      name:
        type: string
      password:
        type: string
      submissions_count:
        type: integer
      type:
        type: string
      url:
        type: string
      username:
        type: string
    type: object
  errors.ErrorResponse:
    properties:
      details: {}
      message:
        type: string
      status:
        type: integer
    type: object
  github.com_saferwall_saferwall-api_internal_auth.loginRequest:
    properties:
      password:
        example: control123
        maxLength: 30
        minLength: 8
        type: string
      username:
        example: mike
        maxLength: 20
        minLength: 1
        type: string
    required:
    - password
    - username
    type: object
  github.com_saferwall_saferwall-api_internal_auth.resetPwdRequest:
    properties:
      email:
        type: string
    required:
    - email
    type: object
  internal_auth.loginRequest:
    properties:
      password:
        example: control123
        maxLength: 30
        minLength: 8
        type: string
      username:
        example: mike
        maxLength: 20
        minLength: 1
        type: string
    required:
    - password
    - username
    type: object
  internal_auth.resetPwdRequest:
    properties:
      email:
        type: string
    required:
    - email
    type: object
host: api.saferwall.com
info:
  contact:
    email: support@saferwall.com
    name: API Support
    url: https://about.saferwall.com/contact.html
  description: Interact with Saferwall Malware Analysis Platform
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: https://about.saferwall.com/tos
  title: Saferwall Web API
  version: "1.0"
paths:
  /auth/login/:
    post:
      consumes:
      - application/json
      description: Users logins by username and password.
      parameters:
      - description: Username and password
        in: body
        name: auth-request
        required: true
        schema:
          $ref: '#/definitions/internal_auth.loginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: '{"token": "value"}'
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
      summary: Log in
      tags:
      - auth
  /auth/logout/:
    delete:
      description: Delete the cookie used for authentication.
      responses:
        "204":
          description: logout success
      summary: Log out from current session
      tags:
      - auth
  /auth/password/:
    post:
      consumes:
      - application/json
      description: Update the password from the auth token received in email.
      parameters:
      - description: Email used during account sign-up
        in: body
        name: reset-pwd
        required: true
        schema:
          $ref: '#/definitions/internal_auth.resetPwdRequest'
      produces:
      - application/json
      responses:
        "200":
          description: '{"token": "value"}'
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
      summary: Create a new password from a token received in email
      tags:
      - auth
  /auth/reset-password/:
    post:
      consumes:
      - application/json
      description: Request a reset password for anonymous users.
      parameters:
      - description: Email used during account sign-up
        in: body
        name: reset-pwd
        required: true
        schema:
          $ref: '#/definitions/internal_auth.resetPwdRequest'
      produces:
      - application/json
      responses:
        "200":
          description: '{"token": "value"}'
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
      summary: Reset password for non-logged users by email
      tags:
      - auth
  /auth/verify-account/:
    get:
      description: Verify the JWT token received during account creation.
      parameters:
      - description: GUID to identify the token
        in: query
        name: guid
        required: true
        type: string
      - description: JWT token generated for account creation
        in: query
        name: token
        required: true
        type: string
      responses:
        "200":
          description: '{"token": "value"}'
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
      summary: Confirm a new account creation
      tags:
      - auth
  /files/:
    get:
      consumes:
      - application/json
      description: List files
      parameters:
      - description: Number of files per page
        in: query
        name: per_page
        type: integer
      - description: Specify the page number
        in: query
        name: page
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/entity.File'
            type: array
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
      summary: Retrieves a pagined list of files
      tags:
      - file
    post:
      consumes:
      - multipart/form-data
      description: Upload file for analysis.
      parameters:
      - description: binary file
        in: formData
        name: file
        required: true
        type: file
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/entity.File'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "413":
          description: Request Entity Too Large
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
      summary: Submit a new file for scanning
      tags:
      - file
  /files/{sha256}:
    delete:
      consumes:
      - application/json
      description: Deletes a file by ID
      parameters:
      - description: File SHA256
        in: path
        name: sha256
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
          schema:
            $ref: '#/definitions/entity.File'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
      summary: Deletes a file
      tags:
      - file
    get:
      consumes:
      - application/json
      description: Retrieves the content of a file report.
      parameters:
      - description: File SHA256
        in: path
        name: sha256
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entity.File'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
      summary: Get a file report
      tags:
      - file
    patch:
      consumes:
      - application/json
      description: Patch a portion of a file report
      parameters:
      - description: File SHA256
        in: path
        name: sha256
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entity.File'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
      summary: Update a file report (partial update)
      tags:
      - file
    put:
      consumes:
      - application/json
      description: Replace a file report with a new report
      parameters:
      - description: File SHA256
        in: path
        name: sha256
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entity.File'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
      summary: Update a file report (full update)
      tags:
      - file
  /users/{username}:
    get:
      consumes:
      - application/json
      description: Retrieves information about a user
      parameters:
      - description: User ID
        in: path
        name: username
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entity.User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.ErrorResponse'
      summary: Get user information by user ID
      tags:
      - user
schemes:
- https
swagger: "2.0"
